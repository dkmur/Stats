## Database settings ##
SQL_user=dkmur
SQL_password=dkmur123
DB_IP=127.0.0.1
DB_PORT=3306
MAD_DB=rmdb
STATS_DB=pogodb

## MADmin settings, for quest recalc and getting ATV settings##
# MAD instance 1
MAD_instance_name_1=MAD
MAD_url_1=http://localhost:5000
MADmin_username_1=someuser
MADmin_password_1=somepass
MAD_path_1=/home/me/MAD/

# MAD instance 2, must be connected to same DB as instance 1
MAD_instance_name_2=
MAD_url_2=
MADmin_username_2=
MADmin_password_2=
MAD_path_2=

# MAD instance 3, must be connected to same DB as instance 1
MAD_instance_name_3=
MAD_url_3=
MADmin_username_3=
MADmin_password_3=
MAD_path_3=

# MAD instance 4, must be connected to same DB as instance 1
MAD_instance_name_4=
MAD_url_4=
MADmin_username_4=
MADmin_password_4=
MAD_path_4=

# MAD instance 5, must be connected to same DB as instance 1
MAD_instance_name_5=
MAD_url_5=
MADmin_username_5=
MADmin_password_5=
MAD_path_5=

## Stats ##
PATH_TO_STATS=/home/dkmur/temp/Stats/
DEFINED_SCAN_AREAS='Amsterdam, London, Paris'		# only used for visualisation in Stats menu, not used for Grafana
DEFAULT_AREA=London					# Default area to be used for Stats sql queries, not used for Grafana

## Stats fence creation ##
FENCE=box						# options:MAD/box/world. MAD=use MAD (sub)fences, box=define lat/lon max/min per area yourself, world=like box but Stats will create one big fence covering everything
MAD_DEVICE_INSERT=false					# auto fill table Area, linking devices to Areas(geofence name of mon_mitm), requires FENCE=MAD. Note: only works if each walker contain max 1 mon_mitm area.  
MAD_FENCE_UPDATE_INTERVAL=hour				# hour or day, interval for updating Stats on MAD geofences, requires FENCE=MAD. New devices will be added at same interval in case MAD_DEVICE_INSERT=true.

## ATV details ##
atvdetails=true						# true/false: get cpu temperature, sw versions and RGC/PD settings from atv 
atvdetails_hours=24					# execute download atvdetails every X hours, default 24 => daily
job_wait=2m						# wait time for jobs to finish i.e. 2m or 300s

## Grafana ##
DataSource_stats=pogodb
DataSource_MAD=rmdb

## backup of spawnpoints is done to statsdb.spawn_unused, in case you wish to restore them ##
## Make sure that all geofences have (sub)fence names store inside in between [] ##
# daily backup/remove spawnpoints discovered during quest scan hours #
QUEST_SPAWN_CLEANUP=false
QUEST_SPAWN_CLEAN_HR=6					# hour to be use in crontab
QUEST_SPAWN_CLEAN_MIN=13				# minutes to be used in crontab
QUEST_START='02:00:00'					# quest scan start time
QUEST_END='06:00:00'					# quest scan end time
# daily backup/remove all spawnpoints unseen for X days or no endtime learned in X days with eventid=1 #
SPAWN_ALL_CLEANUP=false
SPAWN_UNSEEN_DAYS=2					# number of days a spawnpoint is not scanned before inserting into table spawn_unused and deleting it from trs_spawn, 9999 to disable
SPAWN_NO_ENDTIME_DAYS=3					# number of days a spawnpoint is discovered yet no endtime found => insert into table spawn_unused and deleting from trs_spawn, 9999 to disable
# daily backup/remove all spawnpoints outside monmitm fences seen less then X time today # 
SPAWN_UNFENCED_CLEANUP=false				# spawnpoint backup to statsdb.spawn_unused and remove from maddb.trs_spawn seen less then SPAWN_UNFENCED_TIMES times today
SPAWN_UNFENCED_TIMES=3					# minimum number of times a spawnpoint OUTSIDE all monmitm fences has to be seen to keep it in trs_spawn else is will be backed up and removed 

## Cleaup spawndef 15
USING_REDIS_CAHCHE=false                                # using redis server for MAD
SPAWNDEF15_CLEANUP=false				# daily reset incorrect hourly spawndefs. An hourly spawn must have been seen in first and second 30min period, based on yesterdays hourly data (after QUEST_END)
SPAWNDEF15_HOURS=15					# number of hours spawnpoint has not been seen in first and second 30min period before resetting spawnpoint

## Pokemons scanned cleanup/backup ##
mon_backup=false					# Store todays mons scanned to pokemon_history, required for SPAWNDEF15_CLEAUP!! Data is not needed for Stats anymore since it is already processed
mon_cleanup=true					# Cleanup pokemon_history (mon_backup=true)
days_to_keep=14						# Number of days Pokemon data is stored into pokemon_history
monthly_mon_table=false					# Create a new table each month where all scanned mons will be added. If set to true make sure mon_cleanup=false !!
monthly_mon_database=pogodb				# Database to be used for monthly pokemon backup table, make sure to grant privileges to SQL_user

## Pokestop / Quest cleanup ##
stop_to_gym_remove=false				# Remove pokestops that became gym
stop_no_quest_remove=false				# Remove pokestops that have no quest scanned for no_quest_days
no_quest_days=5						# Number of days of no quest scanned before deletion of pokestop
recalc_quest_routes=false				# Weekly recalculation of quest routes
quest_recalc_wait=60s					# Time in seconds to wait between quest route recalculations

## Gym cleanup ##
gym_not_scanned_days=9999				# delete gym if not scanned for X days 

## Backup MAD tables ##
mad_backup=true						# Daily backup MAD database to /MADbackup. Following tables are excluded: filestore_chunks/filestore_meta/pokemon/raid/weather/trs_status/trs_visited/trs_stats_detect/trs_stats_detect_mon_raw/trs_stats_detect_fort_raw/trs_stats_location/trs_stats_location_raw/trs_quest/trs_usage/trs_s2cells
backup_delete_days=7					# number of days to keep a backup after which it is deleted 

## Stats cleanup for different ReportPeriodLength in days ##
RPL15=90
RPL60=180
RPL1440=9999
RPL10080=9999

## MAD tables cleanup (true or false) ##
pokemon=false						# delete data from table pokemon older then 1 hour
trs_stats_detect_raw=false                              # delete data from table trs_stats_detect_raw older then 1 hour
trs_stats_location_raw=false                            # delete data from table trs_stats_location_raw  older then 1 hour
trs_stats_detect=false					# delete yesterdays data from table trs_stats_detect
trs_stats_location=false				# delete yesterdays data from table trs_stats_location
trs_usage=false						# delete data older then 30 days
